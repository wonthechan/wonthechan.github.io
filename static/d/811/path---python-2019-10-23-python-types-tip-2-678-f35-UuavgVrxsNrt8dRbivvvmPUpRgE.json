{"data":{"site":{"siteMetadata":{"title":"chan's devlog","author":"wonthechan (Yechan Lim)","siteUrl":"https://wonthechan.github.io","comment":{"disqusShortName":"","utterances":"wonthechan/wonthechan.github.io"}}},"markdownRemark":{"id":"b9ceaf03-a91c-5613-bc99-490093d40b3e","excerpt":"single container Integer List Float Tuple String Dictionary Boolean Set single 타입을 다루었던 지난편에 이어 이번편에서는 container 타입중에서 가장 빈번하게 사용하는 4가지 :  List, Tuple, Dictionary, Set  객체에 대해 간략하게 정리해보자. List (리스트 자료형) 파이썬에서 리스트는 배열의 역할을 하면서 동시에 몇가지 확장된 기능들을 가지고 있다. 또한 리스트는 mutable…","html":"<table>\n<thead>\n<tr>\n<th align=\"center\">single</th>\n<th align=\"center\">container</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Integer</td>\n<td align=\"center\">List</td>\n</tr>\n<tr>\n<td align=\"center\">Float</td>\n<td align=\"center\">Tuple</td>\n</tr>\n<tr>\n<td align=\"center\">String</td>\n<td align=\"center\">Dictionary</td>\n</tr>\n<tr>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">Set</td>\n</tr>\n</tbody>\n</table>\n<p>single 타입을 다루었던 지난편에 이어 이번편에서는 container 타입중에서 가장 빈번하게 사용하는 4가지 : <strong>List, Tuple, Dictionary, Set</strong> 객체에 대해 간략하게 정리해보자.</p>\n<h2 id=\"list-리스트-자료형\"><a href=\"#list-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"list 리스트 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List (리스트 자료형)</h2>\n<p>파이썬에서 리스트는 배열의 역할을 하면서 동시에 몇가지 확장된 기능들을 가지고 있다. 또한 리스트는 mutable하기 때문에 요소를 자유롭게 삭제하거나 추가하는 등 수정이 가능하다.</p>\n<h4 id=\"list-comprehension\"><a href=\"#list-comprehension\" aria-label=\"list comprehension permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Comprehension</h4>\n<p>List Comprehension을 활용하면 몇줄의 코드를 다음과 같이 한줄로 간결하게 대체할 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>조건이 딸린 for문도 사용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"sort와-sorted-구분\"><a href=\"#sort%EC%99%80-sorted-%EA%B5%AC%EB%B6%84\" aria-label=\"sort와 sorted 구분 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sort()와 sorted 구분</h4>\n<p>리스트안의 요소를 정렬하고 싶을 때는 <strong>sort()</strong>와 <strong>Sorted</strong>를 사용할 수 있지만 그 사용법이 서로 조금 다르다.</p>\n<p>먼저 <strong>Sorted</strong> 함수는 리스트를 인자로 받아서 정렬된 리스트를 반환해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_sorted_list <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span></code></pre></div>\n<p>반면 <strong>sort()</strong>는 리스트의 메소드로서 아무것도 반환하지 않고 그 리스트 객체 자체를 정렬된 상태로 수정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>따라서 정렬하기전 상태의 기존의 리스트를 보존하고 싶은 경우에는 <strong>sorted</strong> 함수를, 그럴 필요가 없는 경우에는 <strong>sort()</strong> 메소드를 사용하면 된다.</p>\n<h4 id=\"다양한-내장-함수-활용\"><a href=\"#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%82%B4%EC%9E%A5-%ED%95%A8%EC%88%98-%ED%99%9C%EC%9A%A9\" aria-label=\"다양한 내장 함수 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다양한 내장 함수 활용</h4>\n<p>별도의 함수를 만들지 않아도 왠만한 함수들을 내장하고 있기 때문에 필요할때마다 편하게 사용하여 생산성을 높일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 리스트의 길이를 반환</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 리스트 원소들의 합을 반환</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 최대값을 가진 원소를 반환</span>\n<span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 최소값을 가진 원소를 반환</span>\n<span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"슬라이싱-음수-인덱스-활용\"><a href=\"#%EC%8A%AC%EB%9D%BC%EC%9D%B4%EC%8B%B1-%EC%9D%8C%EC%88%98-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%99%9C%EC%9A%A9\" aria-label=\"슬라이싱 음수 인덱스 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>슬라이싱, 음수 인덱스 활용</h4>\n<p>원하는 범위만큼 리스트를 자르고 싶을 때 유용하게 사용할 수 있는 것이 슬라이싱이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 처음부터 다섯번째 원소까지 잘라서 반환</span>\nmy_sliced_list <span class=\"token operator\">=</span> my_list<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>음수 인덱스를 활용하면 가장 마지막 인덱스의 원소를 참조하거나 리스트의 뒷부분을 잘라낼 때 요긴하게 써먹을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 리스트의 가장 마지막 인덱스 원소 참조</span>\ntail_element <span class=\"token operator\">=</span> my_list<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 끝에서 다섯번째 원소까지 잘라서 반환</span>\nmy_tail_list <span class=\"token operator\">=</span> my_list<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"map-reduce-및-filter-함수-활용\"><a href=\"#map-reduce-%EB%B0%8F-filter-%ED%95%A8%EC%88%98-%ED%99%9C%EC%9A%A9\" aria-label=\"map reduce 및 filter 함수 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map, reduce 및 filter 함수 활용</h4>\n<p>람다 함수와 함께 map, reduce 및 filter와 같은 함수를 결합하여 사용하면 리스트를 좀 더 효율적으로 댜룰 수 있다. 람다 함수를 활용하는 법에 대해서는 나중에 더 자세히 따로 다뤄보도록 하자.</p>\n<h2 id=\"tuple-튜플-자료형\"><a href=\"#tuple-%ED%8A%9C%ED%94%8C-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"tuple 튜플 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tuple (튜플 자료형)</h2>\n<p>사실 튜플 자료형은 리스트와 그 사용 유형이 꽤 겹치기 때문에 사용빈도가 그렇게 높지는 않은 편이다.</p>\n<p>그렇지만 튜플 자료형만이 가지는 몇가지 장점들이 있기 때문에 적재적소에 잘 활용한다면 리스트만 사용할 때보다 훨씬 더 간결한 코드를 작성할 수 있다.</p>\n<h4 id=\"초기-상태-표현시-사용\"><a href=\"#%EC%B4%88%EA%B8%B0-%EC%83%81%ED%83%9C-%ED%91%9C%ED%98%84%EC%8B%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"초기 상태 표현시 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기 상태 표현시 사용</h4>\n<p>초반에서 변수 초기화할 때 다음과 같이 표현이 가능하기 댸문에 코드가 길어지는 것을 방지한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span></code></pre></div>\n<h4 id=\"map을-함께-사용한-입력-받기\"><a href=\"#map%EC%9D%84-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\" aria-label=\"map을 함께 사용한 입력 받기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map을 함께 사용한 입력 받기</h4>\n<p>map 함수를 함께 사용하면 한 줄에 주어지는 입력을 편리하게 변수에 저장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"객체의-값을-동시에-바꾸는-것이-가능\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EA%B0%92%EC%9D%84-%EB%8F%99%EC%8B%9C%EC%97%90-%EB%B0%94%EA%BE%B8%EB%8A%94-%EA%B2%83%EC%9D%B4-%EA%B0%80%EB%8A%A5\" aria-label=\"객체의 값을 동시에 바꾸는 것이 가능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체의 값을 동시에 바꾸는 것이 가능</h4>\n<p>C/C++ 에서는 두개의 변수 값을 서로 맞바꾸는 일을 하기 위해서는 별도의 swap 함수를 만들어서 사용해야 했지만 튜플 자료형을 활용하면 그냥 위치만 바꿔서 그대로 써주면 된다(?) 매우 직관적이고 간단하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token comment\"># Swap</span>\na<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a</code></pre></div>\n<h2 id=\"dictionary-딕셔너리-자료형\"><a href=\"#dictionary-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"dictionary 딕셔너리 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary (딕셔너리 자료형)</h2>\n<p>딕셔너리 자료형은 자바의 map 자료형에 대응되며 단어 뜻 그대로 key를 가지고 value를 찾아내는 사전같은 의미를 지닌다.</p>\n<h4 id=\"keys-와-values\"><a href=\"#keys-%EC%99%80-values\" aria-label=\"keys 와 values permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>keys() 와 values()</h4>\n<p>딕셔너리가 가지고 있는 key와 value들을 따로 빼서 관리하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 딕셔너리의 현재 모든 key들을 반환</span>\nmy_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 딕셔너리의 현재 모든 value들을 반환</span>\nmy_dict<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p> 나중에 정렬을 해야 하는 경우 key값이나 value값에 따라 정렬하는것도 가능하다.</p>\n<h4 id=\"단어-등장-횟수-세기\"><a href=\"#%EB%8B%A8%EC%96%B4-%EB%93%B1%EC%9E%A5-%ED%9A%9F%EC%88%98-%EC%84%B8%EA%B8%B0\" aria-label=\"단어 등장 횟수 세기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단어 등장 횟수 세기</h4>\n<p>문자열을 key, 즉 인덱스로 활용할 수 있기 때문에 이런 특성을 이용하여 텍스트에서 등장하는 단어 빈도수를 셀 때 유용하게 쓰일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">if</span> word <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> my_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    my_dict<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    my_dict<span class=\"token punctuation\">[</span>word<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"set-셋-자료형\"><a href=\"#set-%EC%85%8B-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"set 셋 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set (셋 자료형)</h2>\n<p>말 그대로 집합의 의미를 가지는 자료형. </p>\n<p>집합의 특성을 이용하므로 중복이 허용되지 않는 자료형을 만들고자 하거나 교집합 연산이 필요한 케이스에서 요긴하게 쓰일 수 있다.</p>\n<h4 id=\"중복-체크\"><a href=\"#%EC%A4%91%EB%B3%B5-%EC%B2%B4%ED%81%AC\" aria-label=\"중복 체크 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복 체크</h4>\n<p>중복된 원소를 가지고 있는 리스트를 set 자료형으로 변환하게 되면 모든 중복 원소를 체크하여 단 한번만 원소가 등장할 수 있게 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_set <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># {1,2,3,4,5}</span></code></pre></div>\n<p>이런 특성을 이용하여 리스트의 원소 중복체크를 하는 함수를 간단하게 만들어볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 리스트에 원소가 중복되어 등장하는 경우 True를 반환한다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">has_duplicates</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"합집합-여집합-차집합-등의-집합-연산\"><a href=\"#%ED%95%A9%EC%A7%91%ED%95%A9-%EC%97%AC%EC%A7%91%ED%95%A9-%EC%B0%A8%EC%A7%91%ED%95%A9-%EB%93%B1%EC%9D%98-%EC%A7%91%ED%95%A9-%EC%97%B0%EC%82%B0\" aria-label=\"합집합 여집합 차집합 등의 집합 연산 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합집합, 여집합, 차집합 등의 집합 연산</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns2 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 교집합 구하기 => {4, 5, 6}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 합집합 구하기 => {1, 2, 3, 4, 5, 6, 7, 8, 9}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">|</span> s2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 차집합 구하기 => {1, 2, 3}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">-</span> s1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 연산들은 시간복잡도가 크기 때문에 주의하여 사용해야 한다.</p>\n<blockquote>\n<p>References</p>\n<ul>\n<li><a href=\"https://wikidocs.net/16\">https://wikidocs.net/16</a> </li>\n<li><a href=\"https://wikidocs.net/1015\">https://wikidocs.net/1015</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"[Python] 자료형의 기본 활용 Tip - 2","date":"October 23, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/2019-10-23-python-types-tip-2/","previous":{"fields":{"slug":"/python/2019-10-16-python-types-tip-1/"},"frontmatter":{"title":"[Python] 자료형의 기본 활용 Tip - 1","category":"python"}},"next":null}}