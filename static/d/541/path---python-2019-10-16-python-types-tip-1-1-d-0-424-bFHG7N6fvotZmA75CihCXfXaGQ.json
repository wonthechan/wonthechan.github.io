{"data":{"site":{"siteMetadata":{"title":"Good Day to Code","author":"wonthechan (Yechan Lim)","siteUrl":"https://wonthechan.github.io","comment":{"disqusShortName":"","utterances":"wonthechan/wonthechan.github.io"},"sponsor":{"buyMeACoffeeId":"FYkca7l9A"}}},"markdownRemark":{"id":"58811fc0-2ff0-5be8-b554-29a6ce7d0f17","excerpt":"파이썬에서의 자료형은 다음과 같이 크게 단일 변수를 다루는  single  타입과 여러 데이터를 다루는  container  타입으로 나눌 수 있다. single container Integer List Float Tuple String Dictionary Boolean Set 앞선 자료형들의 기본적인 사항에 대해서 모두 다루진 않고, 코딩테스트를 준비하면서 각 자료형들을 사용할 때 주의해야 할점이나 알아두면 유용한 팁들을 간략하게 정리해보았다. Integer (정수 자료형) 파이썬에서의 int…","html":"<p>파이썬에서의 자료형은 다음과 같이 크게 단일 변수를 다루는 <strong>single</strong> 타입과 여러 데이터를 다루는 <strong>container</strong> 타입으로 나눌 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">single</th>\n<th align=\"center\">container</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Integer</td>\n<td align=\"center\">List</td>\n</tr>\n<tr>\n<td align=\"center\">Float</td>\n<td align=\"center\">Tuple</td>\n</tr>\n<tr>\n<td align=\"center\">String</td>\n<td align=\"center\">Dictionary</td>\n</tr>\n<tr>\n<td align=\"center\">Boolean</td>\n<td align=\"center\">Set</td>\n</tr>\n</tbody>\n</table>\n<p>앞선 자료형들의 기본적인 사항에 대해서 모두 다루진 않고, 코딩테스트를 준비하면서 각 자료형들을 사용할 때 주의해야 할점이나 알아두면 유용한 팁들을 간략하게 정리해보았다.</p>\n<h2 id=\"integer-정수-자료형\"><a href=\"#integer-%EC%A0%95%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"integer 정수 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integer (정수 자료형)</h2>\n<p>파이썬에서의 int형 사용은 다른 언어와 비교하여 몇가지 특징을 가진다.</p>\n<p>수의 크기 제한이 없기 때문에 overflow에 대한 걱정을 줄일 수 있고 다음과 같은 큰 수를 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376</span></code></pre></div>\n<p>String 문자열로의 형변환이 간편하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># '2'</span></code></pre></div>\n<p>int형에서 나눗셈을 할 경우 <strong>//</strong> 연산을 사용하여 float로 변환되지 않도록 하는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">//</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># int</span>\n\n<span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># float</span></code></pre></div>\n<p>또는 divmod를 사용하면 나눗셈 결과의 몫과 나머지를 튜플형태로 받아올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">divmod</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># (1, 2)</span></code></pre></div>\n<h2 id=\"float-실수-자료형\"><a href=\"#float-%EC%8B%A4%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"float 실수 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Float (실수 자료형)</h2>\n<p>당연히 0.1 곱하기 6은 0.6인것 같지만 파이썬에서의 실수연산은 실수 오차를 가지고 있기 때문에 실제로 해당 연산 결과를 비교해보면 False를 리턴하는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.6</span>\n<span class=\"token comment\"># False</span></code></pre></div>\n<p>Decimal과 같은 외부 모듈을 사용하거나 다른 여러가지 방법을 통해 해결할 수 있지만 이를 관리하기 어렵거나 귀찮다면 되도록 float 연산은 하지 않는 것이 여러모로 안전하다.</p>\n<p>유리수 연산이 필요한 경우에는 tuple 자료형을 사용하여 분자와 분모를 따로 관리하는 방식으로 float 사용을 피할 수 있다.</p>\n<h2 id=\"string-문자열-자료형\"><a href=\"#string-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"string 문자열 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String (문자열 자료형)</h2>\n<p>기본적으로 파이썬에서 String은 Immutable 변수이기 때문에 수정이 불가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">string <span class=\"token operator\">=</span> <span class=\"token string\">'wonthechan'</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">:</span>\n    i <span class=\"token operator\">=</span> <span class=\"token string\">'3'</span>\n    \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># wonthechan</span></code></pre></div>\n<p> 기본적으로 더하기 및 곱하기 연산을 지원하기 때문에 다음과 같이 활용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">'good'</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">'morning'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># goodmorning</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># goodgoodgood</span></code></pre></div>\n<p>사용이 간편하긴 하지만 연산량이 커지는 경우에는 시간을 많이 소요할 수 있기 때문에 그럴때는 join() 메소드로 대체하는것이 좋다.</p>\n<p>Char형을 다루고자 할 때는 <strong>ord()</strong> 또는 <strong>chr()</strong> 같은 내장함수를 활용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 'A'</span>\n<span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 65</span></code></pre></div>\n<h2 id=\"boolean-불-자료형\"><a href=\"#boolean-%EB%B6%88-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"boolean 불 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean (불 자료형)</h2>\n<h4 id=\"short-circuit-evaluation\"><a href=\"#short-circuit-evaluation\" aria-label=\"short circuit evaluation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Short-circuit evaluation</h4>\n<p>두가지 조건에 대해 AND와 OR 연산을 사용할 때에는 첫번째 조건의 결과에 따라 두번째 조건을 확인하지 않아도 결과가 정해지기 때문에, 두 번째 조건은 실행 하지 않는 것이 효율적이다.</p>\n<p>이런 방식을 <strong>Short-circuit evaluation</strong> 이라고 하는데 첫 번째 조건과 상관없이 항상 두 번째 조건을 실행하는 <strong>eager operator</strong> 방식과 반대되는 개념이다.</p>\n<p>이를 위해 파이썬에서는 <strong>&#x26;</strong> 과 <strong>and</strong> 를 구분하여 사용할 수 있게 하였다.</p>\n<ul>\n<li>\n<p>eager operator => &#x26; / |</p>\n</li>\n<li>\n<p>circuit evaluation => and / or</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># False (short-circuit 방식 - 두 번째 조건 확인 안함)</span>\n\n<span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># ZeroDivisionError: division by zero (eager 방식 - 두 번째 조건 확인)</span></code></pre></div>\n<p>2편에서 계속… ✋ </p>\n<blockquote>\n<p>References</p>\n<ul>\n<li><a href=\"https://wikidocs.net/12\">https://wikidocs.net/12</a> </li>\n<li><a href=\"https://yahwang.github.io/posts/55\">https://yahwang.github.io/posts/55</a> </li>\n</ul>\n</blockquote>","frontmatter":{"title":"[Python] 자료형의 기본 활용 Tip - 1","date":"October 16, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python/2019-10-16-python-types-tip-1/","previous":{"fields":{"slug":"/development/first/"},"frontmatter":{"title":"First Post","category":"development"}},"next":null}}